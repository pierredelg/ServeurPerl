#!/usr/bin/perl

use strict;
use warnings;
use Socket;

sub lireFichierConf{
    #Ouverture et lecture du fichier comanche.conf
    open my($file),'<', './comanche.conf' or die "Impossible d'ouvrir le fichier : $!\n";
    while( my $line = <$file> ) {
	chomp($line); #supprime le \n de la ligne
	verifierMotConf($line);
    }
}

sub verifierSet{
    my @split = @_;
    my $taille = @_;
    my @tab = split(/\s+/, "$line");
    print " taille $taille\n";
    print " verifierSet @split \n";
    my $variable = "$ab[1]";
    print "variable $variable\n";
    if($variable eq "port") {
	       
    }elsif($variable eq "error") {
		
    }elsif($variable eq "index") {

    }elsif($variable eq "logfile") {

    }elsif($variable eq "clients") {

    }else {
	die "$variable est une variable non connue !\n";
    }
}

sub verifierRoute{
    my @split = "@_";
    my $regexp1 = "$split[1]";
    my $to = "$split[2]";
    my $regexp2 = "$split[3]";
}

sub verifierExec{
    my @split = "@_";
    my $regexp1 = "$split[1]";
    my $from = "$split[2]";
    my $regexp2 = "$split[3]";
}

sub verifierMotConf{
    my $line = "@_";
   
    $line =~ s/(?m)^#.*$//;
    $line =~ s/\s*(.*)\s*/$1/;
    $line =~ s/(.*)#(.*)/$1/;
    
    if($line ne ""){
	print " line => $line\n";
    	my @split = split(/\s+/, "$line");
	print " tableau => @split\n";
    	my $ordre = "$split[0]";
    	print "ordre : $ordre\n";
    	if($ordre eq "set") {
	    print "on est ici dans set\n";
    	    verifierSet("@split");
	    
    	}elsif($ordre eq "route") {
	    
    	    verifierRoute("@split");
	    
    	}elsif($ordre eq "exec") {
	    
    	    verifierExec("@split");   
 
    	}else {
	    
    	  die "$ordre est un ordre non connu !\n";
    	}
    }
}


lireFichierConf();
socket(SERVER, PF_INET, SOCK_STREAM, getprotobyname("tcp")) or die("socket");
setsockopt(SERVER, SOL_SOCKET, SO_REUSEADDR, 1);


my $addr = sockaddr_in("3000", INADDR_ANY);
bind(SERVER, $addr) or die("bind: $!");
listen(SERVER, SOMAXCONN) or die("listen: $!");

print "En attente de client\n";
accept(CLIENT, SERVER) or die("accept");

print "Client connect√©\n";
select(CLIENT);
$| = 1;
select(STDOUT);
while (<CLIENT>) {
    chomp;
    print "Client: $_\n";
    print CLIENT "Serveur: $_\n";
}
close(CLIENT);
close(SERVER);
print "Fini\n";
