#!/usr/bin/perl

use strict;
use warnings;
use Socket;


#----------------------------------------------------------------------------#
##### VARIABLES DE FONCTIONNEMENT GLOBAL #####

#port de connexion du Serveur
my $port = 8800;

#Chemin vers un fichier HTML envoyé en cas d'erreur trouvée
my $error = "./error.html";

#Nom de base du fichier quand la ressource demandée est un répertoire
#et qu'il existe bien un fichier dans ce répertoire
my $index = "index.html";

#Chemin vers le fichier contenant les logs
my $logfile = "./comanche.log";

#Nombre maximal de requetes à traiter en même temps
my $clients = 10;

#Fichier de stockage des pids fils
my $pidfile = "./.pid";

#----------------------------------------------------------------------------#
##### PARAMETRAGE DES ROUTES #####

#On construit une table de hachage qui va contenir la regexp1 et la regexp2
my %hashRoutes;

#----------------------------------------------------------------------------#
##### PARAMETRAGE DES EXEC #####

#On construit une table de hachage qui va contenir la regexp1 et la regexp2
my %hashExec;

#----------------------------------------------------------------------------#

#Tableau contenant les processus fils
my @processusFils;


#$SIG{CHLD} = sub {
#
#    my $pidChild = wait();
#    my @nouv;
#
#    for( my $i = 0; $i < scalar(@processusFils); $i++){
#         if($processusFils[$i] != $pidChild){
#            push(@nouv, $processusFils[$i]);
#         }
#    }
#    
#    @processusFils = @nouv;
#};


#############################   CONFIGURATION   #############################


#méthode qui lit le fichier conf
sub lireFichierConf{
    
    #Ouverture et lecture du fichier comanche.conf
    open my($file),'<', './comanche.conf' or die "Impossible d'ouvrir le fichier : $!\n";

    #On lit chaque ligne du fichier
    while( my $line = <$file> ) {

        #On supprime le \n de la ligne
    	chomp($line);

        #On vérifie le contenu de chaque lignes
    	verifierLigneConf($line);
    }
}

#méthode qui verifie chaque ligne du fichier de configuration
sub verifierLigneConf{

    #On récupere la ligne envoyée en parametre
    my $line = "@_";
   
    #On remplace les lignes commençant par un # par une chaine vide
    $line =~ s/(?m)^#.*$//;

    #On conserve ce qui se trouve entre les caractères d'espacements
    $line =~ s/\s*(.*)\s*/$1/;

    #On supprime la partie suivant le # de la ligne
    $line =~ s/(.*)#(.*)/$1/;
    
    #On vérifie que la ligne n'est pas vide
    if($line ne ""){

        #On répartit chaque élément de la ligne séparés par des espaces dans un tableau
        my @splitLine = split(/\s+/, "$line");

        #On récupere le premier mot du tableau
        my $ordre = "$splitLine[0]";

        #On vérifie la nature de l'ordre
        if($ordre eq "set") {

            #On vérifie le contenu de la ligne commençant par set
            verifierSet("$line");
        
        }elsif($ordre eq "route") {

            #On vérifie le contenu de la ligne commençant par route
            verifierRoute("$line");
        
        }elsif($ordre eq "exec") {

            #On vérifie le contenu de la ligne commençant par exec
            verifierExec("$line");   
 
        }else {

           #Si l'ordre n'est pas connu on affiche une erreur
          die "$ordre est un ordre non connu !\n";
        }
    }
}

#méthode qui verifie les lignes de configuration 
#commencant par set
sub verifierSet{

    #On récupere la ligne passé en parametre
    my $line = "@_";
    
    #On répartit chaque élément de la ligne séparés par des espaces dans un tableau
    my @tab = split(/\s+/, "$line");

    #On récupere le deuxieme élément du tableau
    #correspondant à la variable
    my $variable = "$tab[1]";

    #On vérifie la nature de la variable
    if($variable eq "port") {

        #On récupere le numero du port 
        my $newPort = "$tab[2]";

        #On vérifie que le nouveau numero de port est bien un entier
        if($newPort =~ m/^-?\d+,?\d*$/){

            #On affecte le nouveau numéro de port
            $port = $newPort;
        }else{

            #Si le nouveau numéro de port n'est pas un entier, on envoie une erreur
            die "$newPort n'est pas un entier. Impossible de configurer le port."
        }

    }elsif($variable eq "error") {

        #On récupere le chemin de la page d'erreur 
        my $newError = "$tab[2]";

        #On affecte le nouveau chemin de la page d'erreur
        $error = $newError;
		
    }elsif($variable eq "index") {

        #On récupere le nom de base du fichier 
        my $newIndex = "$tab[2]";

        #On affecte le nouveau nom de base du fichier
        $index = $newIndex;

    }elsif($variable eq "logfile") {

        #On récupere le chemin vers le fichier contenant les logs 
        my $newLogFile = "$tab[2]";

        #On affecte le nouveau chemin vers le fichier contenant les logs
        $logfile = $newLogFile;

    }elsif($variable eq "clients") {

        #On récupere le nombre maximal de requetes à traiter en même temps
        my $newClients = "$tab[2]";

        #On affecte le nouveau Nombre maximal de requetes à traiter en même temps
        $clients = $newClients;

    }else {
        #Si la variable est inconnue on indique l'erreur
	   die "$variable est une variable non connue !\n";
    }
}

#méthode qui verifie les lignes de configuration 
#commencant par route
sub verifierRoute{

    #On récupere la ligne passé en parametre
    my $line = "@_";

    #On répartit chaque élément de la ligne séparés par des espaces dans un tableau
    my @splitLine = split(/\s+/, "$line");

    #On récupere la premiere regex
    my $regexp1 = "$splitLine[1]";

    #On récupere le mot de liaison
    my $to = "$splitLine[2]";

    #On récupere la deuxieme regex
    my $regexp2 = "$splitLine[3]";

    #On vérifie que le mot de liaison est bien to
    if($to eq "to"){

        #On ajoute la regex1 en clé et la regex2 en valeur dans la table de hachage
        $hashRoutes{"$regexp1"}="$regexp2";
    }else{
        die "$to n'est pas valide !\n";
    }
}

#méthode qui verifie les lignes de configuration
#commencant par exec
sub verifierExec{
    #On récupere la ligne passé en parametre
    my $line = "@_";

    #On répartit chaque élément de la ligne séparés par des espaces dans un tableau
    my @splitLine = split(/\s+/, "$line");

    #On récupere la premiere regex
    my $regexp1 = "$splitLine[1]";

    #On récupere le mot de liaison
    my $from = "$splitLine[2]";

    #On récupere la deuxieme regex
    my $regexp2 = "$splitLine[3]";

    if($from eq "from"){
        #On ajoute la regex1 en clé et la regex2 en valeur dans la table de hachage
        $hashExec{"$regexp1"}="$regexp2";
    }else{
        die "$from n'est pas valide !\n";
    }
}

#méthode permettant de construire l'entête de la réponse
sub head_reponse{

    #On récupere les trois parametres
    #status
    #type mime
    #longueur du body de la réponse
    my $args = "@_";
    my @splitLine = split(/\s+/, "$args");

    my $statut = "$splitLine[0]";
    my $type = "$splitLine[1]";
    my $longueur = "$splitLine[2]";

    
    #On envoie chaque ligne de l'entête
    print CLIENT "HTTP/1.1 $statut\r\n";
    print CLIENT "Content-type: $type ; charset=UTF-8\r\n";
    print CLIENT "Content-length: $longueur\r\n";
    print CLIENT "\r\n";
}

#méthode permettant de renvoyer une page d'erreur
sub envoyerPageErreur {

    #On ouvre le handler sur le fichier d'erreur
    open(ERROR, "$error");

    #On calcule la taille du fichier
    my $taille = -s "$error";

    #On envoie l'entete de la réponse
    head_reponse(404,'text/html',"$taille");

    #On envoie la page d'erreur
    while (<ERROR>) {
        print CLIENT;
    }

    #On ferme le handler
    close(ERROR);
}

#méthode permettant de renvoyer un fichier
sub envoyerFichier {

    #On récupere le chemin du fichier
    my $arg = "@_";

    my @splitLine = split(/\s+/, "$arg");

    my $fichier = "$splitLine[0]";
    my $type = "$splitLine[1]";

    #On ouvre le handler sur le fichier
    open(ENVOI, "$fichier");

    #On calcule la taille du fichier
    my $taille = -s "$fichier";

    #On envoie l'entete de la réponse
    head_reponse(200,"$type","$taille");

    #On envoie le fichier
    while (<ENVOI>) {
        print CLIENT;
    }

    #On ferme le handler
    close(ENVOI);
    exit 0;
}

#méthode permettant d'écrire dans le fichier de log
sub ecrireLog {

    #On ouvre le fichier de log
    open(LOG,">>$logfile");

    #On change le séparateur du tableau
    $, = ";";

    #On écrit les parametres 
    print LOG @_,"\n";

    #On ferme le fichier le Log
    close(LOG);
}

#méthode permettant de lister le contenu d'un dossier en liste html
sub listeHTMLDossier {

    #On récupere le nom du dossier
    my $dir = shift;

	my @values = split('/',$dir);

	my $a = $values[@values-1];
	#print "$a\n";

    #On prépare le début du fichier html
    my $reponse =  "<!DOCTYPE html>
                <html lang=\"fr\">
                    <head>
                        <meta charset=\"utf-8\">
                    </head>
                    <body>
                        <h1>$dir</h1>
                        <ul>";

    #On ouvre le dossier
    opendir(REP, $dir);

    #On parcourt le dossier
    for my $fichier (sort readdir(REP)) {

        my $cheminFichier = "$dir\/$fichier";

        #On ajoute la ligne du fichier à la liste
        $reponse .= "<li><a href='$fichier'>$fichier</a></li>";
    }
    
    #On affiche la fin du fichier html
    $reponse .= "       </ul>
                    </body>
                </html>
                ";

    #On envoi l'entête de la réponse
    head_reponse(200,"text/html",length("$reponse"));

    #On affiche la réponse
    print CLIENT "$reponse";
    exit 0;

}

#méthode permettant d'arreter le serveur
sub stop {

    #On vérifie si le serveur est déja arreter
    if(! -e "$pidfile")
    {
        print "Le serveur comanche est déja arreté\n";
        exit 0;
    }

    #On ouvre le fichier des pids
    open(READ, "$pidfile");

    #On récupere le pid enregistré
    my $pid = <READ>;
    chomp($pid);
    my $portPid = <READ>;
    chomp($portPid);
    
    #On ferme le fichier
    close(READ);

    #On tue le processus
    kill(15,"$pid");
    
    #On supprime le fichier avec le pid
    unlink("$pidfile");

    #On écrit le log de l'arret du serveur      
    ecrireLog(time(),"stop", "local", "$portPid", "", "");

    #On écrit le message dans le terminal
    print "Arret du serveur comanche\n";

    exit 0;
}

#méthode permettant d'envoyer le status du serveur
sub status{

}

#méthode permettant de demarrer le serveur
sub start {

    #On fait le fork afin de créer le processus fils
    my $pid = fork;

    #pere
    if ($pid != 0) {

        lireFichierConf();

        #On ouvre le fichier
        open (PID, ">", "$pidfile");

        #On écrit le pid dans le fichier
        print PID "$pid\n";
        print PID "$port\n";

        #On ferme le fichier
        close PID;

        exit 0;

    #fils
    }else{
 

        #On lit , vérifie et applique les données du fichier de configuration
        #Le serveur s'arrete en erreur si une erreur intervient
        lireFichierConf();

        #On crée une socket serveur
        #SERVER => handle de la socket
        #PF_INET => protocole ipv4
        #SOCK_STREAM => type de communication (ici pour TCP)
        #getprotobyname("tcp") => convertit le nom du protocole en numéro reconnaissable pour la fonction
        socket(SERVER, PF_INET, SOCK_STREAM, getprotobyname("tcp")) or die("socket");


        #On configure une option de la socket
        #SERVER => handle de la socket
        #SOL_SOCKET => niveau de configuration de l'option
        #SO_REUSEADDR => permet de réutiliser l'addresse imédiatement après l'avoir libérée
        #1 => active l'option SO_REUSEADDR
        setsockopt(SERVER, SOL_SOCKET, SO_REUSEADDR, 1);


        #On crée une addresse sur le port demandé 
        #avec l'option INADDR_ANY pour écouter sur toutes les interfaces réseaux
        my $addr = sockaddr_in("$port", INADDR_ANY);
        print "Démarrage du serveur comanche sur le port $port...\n";


        #On attache la socket d'ecoute à l'addresse
        bind(SERVER, "$addr") or die("bind: $!");

        #On écoute sur la socket SERVER
        #SOMAXCONN => le nombre de connexions qui peuvent être en attente (ici la max possible)
        listen(SERVER, SOMAXCONN) or die("listen: $!");

        #On ajoute un log de demarrage du serveur
        ecrireLog(time(),"start","local","$port","","");


        while(accept(CLIENT, SERVER)){

            select(CLIENT);
            
            # On active le mode d'écriture systématique des tampons (autoflush) sur le handle de la sortie standard 
            $| = 1;

            #On crée un handle afin d'ecrire sur la sortie standard
            select(STDOUT);


            #On récupere le nom du client
            my $clientName = getpeername(CLIENT);

            #On recupere le port de connexion et l'addresse du client
            my ($portClient,$iaddrClient) = sockaddr_in($clientName);

            #On récupere l'addresse ipv4 du client
            my $ipClient = inet_ntoa($iaddrClient);



            #On vérifie que le nombre maximum de requetes simultanée n'est pas dépassé
            if(scalar @processusFils >= $clients){

                #On crée l'erreur
                my $erreur = "503 Service Unavailable";

                #On calcule la longueur de la chaine
                my $longueur = length("$erreur");

                #On envoie l'entete de la réponse
                head_reponse(503,'text/plain',"$longueur");

                ecrireLog(time(),"get-s","$ipClient","","",503);

                #On envoie l'erreur
                print CLIENT "$erreur";

            }else{

                #On crée un processus fils ouvrier afin de traiter la requete
                my $pidOuvrier = fork();

                if($pidOuvrier == 0){

                    my $lineNumber = 1;
                    #On lit ce qui passe par le handle CLIENT
                    while (<CLIENT>) {

                        #On récupere la premiere ligne
                        my $line = "$_";

                        #On supprime le \n de fin
                        chomp($line);
                        #On supprime le \r de fin
                        chop($line);

                        #Si c'est la premiere ligne reçue on vérifie que la méthode est bien GET / HTTP/1.1
                        if($lineNumber == 1){

                            #On crée un booleen afin de vérifier que la ressource demandée est trouvée
                            my $ressourceOk = 0;

                            #On répartit chaque élément de la ligne séparés par des espaces dans un tableau
                            my @splitLine = split(/\s+/, "$line");

                            #On récupere la méthode
                            my $methode = "$splitLine[0]";

                            #On récupere la ressource
                            my $ressource = "$splitLine[1]";

                            #On récupere la version
                            my $version = "$splitLine[2]";

                            #On vérifie que la méthode est bien GET sinon on envoie une erreur
                            if($methode ne "GET"){

                                #On crée l'erreur
                                my $erreur = "405 Method Not Allowed";

                                #On calcule la longueur de la chaine
                                my $longueur = length("$erreur");

                                #On envoie l'entete de la réponse
                                head_reponse(405,'text/plain',"$longueur");

                                ecrireLog(time(),"get-s","$ipClient","$line","",405);

                                #On envoie l'erreur
                                print CLIENT "$erreur";
                            }

                            #On vérifie que la version est bien 1.1 sinon on envoie une erreur
                            if($version ne "HTTP/1.1"){

                                #On crée l'erreur
                                my $erreur = "505 HTTP Version Not Supported";

                                #On calcule la longueur de la chaine
                                my $longueur = length("$erreur");

                                #On envoie l'entete de la réponse
                                head_reponse(505,'text/plain',"$longueur");

                                ecrireLog(time(),"get-s","$ipClient","$line","",505);

                                #On envoie l'erreur
                                print CLIENT "$erreur";
                            }

                            #On parcourt toutes les  projections de routes
                            foreach my $regexp1Routes (keys(%hashRoutes)) {

                               #On vérifie si la ressource matche avec une regex
                               if($ressource =~ $regexp1Routes){

                                    #On passe le boleen à vrai
                                    $ressourceOk = 1;

                                    #On récupere le chemin correspondant
                                    my $chemin = "$hashRoutes{$regexp1Routes}";
                                    
                                    #On retire le premier / de la ressource
                                    $ressource = substr("$ressource",1);

                                    #on remplace le \1 du chemin par la ressource
                                    $chemin = substr("$chemin",0,-2);

                                    #On construit la projection
                                    my $cheminRessource = "$chemin"."$ressource";

                                    #On récupere l'extension
                                    my $extension = substr("$cheminRessource",-4);

                                    #Si la ressource est un dossier
                                    if(-d $cheminRessource){
                                        my $cheminIndex = "$cheminRessource"."/"."$index";
                                        if(-e $cheminIndex){
                                            envoyerFichier("$cheminIndex","text/html");
                                            ecrireLog(time(),"get-s","$ipClient","$line","$cheminRessource",200);

                                        }else{
                                            listeHTMLDossier("$cheminRessource");
                                            ecrireLog(time(),"get-s","$ipClient","$line","$cheminRessource",200);
                                        }
                                        last;
                                    }

                                    #On vérifie l'extension
                                    if($extension eq "html"){

                                        #On vérifie que la ressource demandée existe
                                        if(-e $cheminRessource){

                                            envoyerFichier("$cheminRessource","text/html");

                                            ecrireLog(time(),"get-s","$ipClient","$line","$cheminRessource",200);
                                        }else{
                                            
                                            envoyerPageErreur();

                                            ecrireLog(time(),"get-s","$ipClient","$line","",404);
                                        }
                                        last;
                                    }
                                    if($extension eq ".png"){
			       
                                        #On vérifie que la ressource demandée existe
                                        if(-e $cheminRessource){
					    
                                            envoyerFichier("$cheminRessource","image/png");

                                            ecrireLog(time(),"get-s","$ipClient","$line","$cheminRessource",200);
                                            
                                        }else{
                                            
                                            envoyerPageErreur();

                                            ecrireLog(time(),"get-s","$ipClient","$line","",404);
                                        }
                                        last;
                                    }
                                    if($extension eq ".txt"){

                                        #On vérifie que la ressource demandée existe
                                        if(-e $cheminRessource){

                                            envoyerFichier("$cheminRessource","text/plain");

                                            ecrireLog(time(),"get-s","$ipClient","$line","$cheminRessource",200);
                                            
                                        }else{

                                            envoyerPageErreur();

                                            ecrireLog(time(),"get-s","$ipClient","$line","",404);
                                        }
                                        last;
                                    }
                                    
                                    #Si la ressource ne correspond à aucun type on envoi une erreur

                                    #On crée l'erreur
                                    my $erreur = "415 Unsupported Media Type";

                                    #On calcule la longueur de la chaine
                                    my $longueur = length("$erreur");

                                    #On envoie l'entete de la réponse
                                    head_reponse(415,'text/plain',"$longueur");

                                    #On envoie l'erreur
                                    print CLIENT "$erreur";

                                    #On écrit dans le fichier de log
                                    ecrireLog(time(),"get-s","$ipClient","$line","$cheminRessource",415);

                                    #On sort de la boucle
                                    last;
                               }
                            }

                            #On parcourt toutes les  projections d'exec
                            foreach my $regexp1Exec (keys(%hashExec)) {

                               #On vérifie si la ressource matche avec la regex
                               if($ressource =~ $regexp1Exec){

                                    #On passe le boleen à vrai
                                    $ressourceOk = 1;

                                    #On remplace la ressource par le match de la regex
                                    $ressource =~ s/$regexp1Exec/$hashExec{$regexp1Exec}/;

                                    #On sort de la boucle
                                    last;
                               }
                            }

                            if(!$ressourceOk){

                                envoyerPageErreur();

                                ecrireLog(time(),"get-s","$ipClient","$line","",404);

                            }
                        }

                        $lineNumber++;

                    }
                    #On ferme la socket CLIENT
                    close(CLIENT);

                    exit 0;
                }
                push(@processusFils, $pidOuvrier);
            }
            #On ferme la socket CLIENT
            close(CLIENT);
        }

        #On ferme la socket SERVER
        close(SERVER);
    }
}

############################   DEBUT DU PROGRAMME   ############################

#On vérifie que le programme soit lancé avec un parametre
die("Un paramètre est obligatoire pour lancer le serveur (start, stop, status)\n") if ($#ARGV < 0 || $#ARGV > 1);

# Récupère la commande
my $commande = $ARGV[0]; 

# On vérifie la commande à lancer
if ($commande eq "start") {

    #On vérifie que le serveur n'est pas deja lancé
    if(-e $pidfile){
        die("Le serveur comanche est déjà démarré\n");
    }else{
    
        start();
    }

} elsif ($commande eq "status") {
   
    status();

} elsif ($commande eq "stop") {
   
    stop();

} else {
    die("Le paramètre n'est pas pris en charge. (start, stop, status)\n");
}
